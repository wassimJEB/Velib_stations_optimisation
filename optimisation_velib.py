# -*- coding: utf-8 -*-
"""Optimisation_velib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kqcd77eKCqNGjstNmwgV6n6sTrnrL8CP
"""

import pandas as pd
import urllib

API_KEY = "0a23bc099d920294b016a59a2ea19be2f171b410" # FIXME Set your own API key here
url = "https://api.jcdecaux.com/vls/v1/stations?apiKey={}".format(API_KEY)

with urllib.request.urlopen(url) as response:
    velib_data = pd.read_json(response.read())

from datetime import datetime
now = datetime.now()
date_of_data=now.strftime('%Y/%m/%d %H:%M:%S')

print ('Data retrieved on: ' + str(date_of_data))
    
velib_data.head()

print("There are {0} Velib stands in Paris".format(velib_data.address.count()))
print("There are {0} bike stands in total".format(velib_data.bike_stands.sum()))
print("There are {0} available bikes".format(velib_data.available_bikes.sum()))
print("There are {0} available bikes stands".format(velib_data.available_bike_stands.sum()))
print("")

bike_stands_max = velib_data.bike_stands.max()
bike_stands_max_query = "bike_stands == " + str(bike_stands_max)
print("Biggest stations with {0} bike stands:".format(bike_stands_max))
print(velib_data.query(bike_stands_max_query).address.values)
print("")

bike_stands_min = velib_data.bike_stands.min()
bike_stands_min_query = "bike_stands == " + str(bike_stands_min)
print("Smallest stations with {0} bike stands:".format(bike_stands_min))
print(velib_data.query(bike_stands_min_query).address.values)

velib_data['latitude'] = velib_data['position'].apply(lambda x: x['lat'])
velib_data['longitude'] = velib_data['position'].apply(lambda x: x['lng'])
velib_data.head()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.style.use('ggplot')

fig, ax = plt.subplots(figsize=(8, 8))
velib_data.plot(ax = ax, kind='scatter', y='latitude', x='longitude', title='Velib stations location');

velib_data.plot(kind='scatter', y='latitude', x='longitude' , c='bike_stands', title='Velib station bike stands');

velib_data.query("available_bikes == 0").plot.scatter(y='latitude', x='longitude',
                                                      title='Velib stations with no bike available as of '+str(date_of_data));

set(velib_data['address'])

fig, ax = plt.subplots(figsize=(10, 8))
velib_data['availability'] = 100 * velib_data['available_bikes'] / velib_data['bike_stands']
velib_data.plot(ax = ax, kind='scatter', y='latitude', x='longitude' , c='availability', cmap=plt.get_cmap('RdYlGn'));

plt.title(' Velib station bike availability on ' + date_of_data);

import folium
from folium.plugins import HeatMap

m = folium.Map(location=[48.86, 2.35], zoom_start=12)

data = [[a,b,c] for a,b,c in zip(velib_data.latitude.values,
                                 velib_data.longitude.values,
                                 velib_data.availability.values) ]

"""## Removing Missing Value"""

df = pd.DataFrame(data)

df.shape

df.dropna(inplace=True)

df.shape

data1=df.values.tolist()
data1

gradient={'0': 'Red','0.5': 'Yellow','1': 'Green'}

# plot heatmap
m.add_child(HeatMap(data1, radius=7, gradient=gradient) )

display(m)



"""## Return bike to place with bonuses optimisation """

m = folium.Map(location=[48.86, 2.35], zoom_start=12)
df = velib_data.query("bonus == True")
for lat,lon in zip(df.latitude,df.longitude):
    folium.CircleMarker(location = [lat, lon], radius=7 ).add_to(m)
display(m)

